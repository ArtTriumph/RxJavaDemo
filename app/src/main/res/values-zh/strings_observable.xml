<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="str_mainlist_Observable_all_info">
        all 操作符根据一个函数对源Observable发射的所有数据进行判断，最终返回的结果就是这个判断结果。
        这个函数使用发射的数据作为参数，内部判断所有的数据是否满足我们定义好的判断条件，如果全部都满足则返回true，否则就返回false。
    </string>

    <string name="str_mainlist_Observable_amb_info" formatted="false">
        amb 操作符将若干个 Observable 结合起来，让它们竞争。最终哪个 Observable 首先发射了数据（包括 onError 和 onCompleted )
        就会继续发射这个 Observable 的数据，其他的 Observable 所发射的数据都会别丢弃。
    </string>

    <string name="str_mainlist_Observable_asObservable_info">
        由于 Observable 是不可变的，所以 asObservable 操作符是为了把一个 Observable 对象包装起来并安全的分享给其他人使用。
    </string>

    <string name="str_mainlist_Observable_buffer_info">
        buffer 操作符将数据按照指定的规则做一个缓存，然后将缓存的数据作为一个集合发射出去
    </string>

    <string name="str_mainlist_Observable_cache_info">
        cache 操作符能够记住 Observable 发射的数据序列并发射相同的数据序列给后续的订阅者
    </string>

    <string name="str_mainlist_Observable_cast_info">
        cast 操作符主要是做类型转换的，传入参数为要转换的数据类型 class，
        如果源 Observable 产生的结果不能转成指定的 class，则会抛出 ClassCastException 运行时异常
    </string>

    <string name="str_mainlist_Observable_collect_info">
        collect 操作符用来将源 Observable 发射的数据给收集到一个数据结构里面，需要使用两个参数：
        \n1)产生收集数据结构的函数
        \n2)接收第一个函数产生的数据结构和源 Observable 发射的数据作为参数的函数。
    </string>

    <string name="str_mainlist_Observable_combineLatest_info">
        combineLatest 操作符作用是当两个 Observables 中的任何一个发射了一个数据时，通过一个指定的函数组合每个 Observable 发射的最新数据，然后发射这个函数的结果
        \n\n
        必须满足两个条件：
        \n1)所有的Observable都发射过数据。
        \n2)满足条件1的时候任何一个 Observable 发射一个数据，就将所有 Observable 最新发射的数据按照提供的函数组装起来发射出去。
        \n\n
        在这两个条件下,可能会忽略掉一些发射的数据.
    </string>

    <string name="str_mainlist_Observable_compose_info">
        通过 Transform，对源 Observable 进行操作，保证Rx的链式结构特征。详情请看代码。
    </string>

    <string name="str_mainlist_Observable_concat_info">
        concat 操作符会不交错的连接多个 Observable 的数据，按照先后顺序，逐个检索执行
    </string>

    <string name="str_mainlist_Observable_concatMap_info">
        concatMap 是把源 Observable 产生的结果转换成多个 Observable，
        然后把这多个 Observable “扁平化”成一个 Observable，并依次提交产生的结果给订阅者。
        concatMap() 函数解决了 flatMap() 的交叉问题，提供了一种能够把发射的值连续在一起的铺平函数，而不是合并它们
    </string>

    <string name="str_mainlist_Observable_contains_info">
        用来判断源 Observable 所发射的数据是否包含某一个数据，如果包含会返回 true，如果源 Observable 已经结束了却还没有发射这个数据则返回 false。
    </string>

    <string name="str_mainlist_Observable_count_info">
        count 操作符用来统计源 Observable 发射了多少个数据，最后将数目给发射出来；
        如果源 Observable 发射错误，则会将错误直接报出来；在源 Observable 没有终止前，count 是不会发射统计数据的。
    </string>

    <string name="str_mainlist_Observable_create_info">
        create 操作符可以从头开始创建一个 Observable，给这个操作符传递一个接受观察者作为参数的函数，
        编写这个函数让它的行为表现为一个 Observable ——恰当的调用观察者的 onNext，onError 和 onCompleted 方法。
    </string>

    <string name="str_mainlist_Observable_debounce_info">
        debounce 操作符对源 Observable 每产生一个结果后，如果在规定的间隔时间内没有别的结果产生，则把这个结果提交给订阅者处理，否则忽略该结果。
        \n
        值得注意的是，如果源 Observable 产生的最后一个结果后在规定的时间间隔内调用了 onCompleted，那么通过 debounce 操作符也会把这个结果提交给订阅者。
    </string>

    <string name="str_mainlist_Observable_defaultIfEmpty_info">
        defaultIfEmpty 操作接受一个备用数据，在原 Observable 没有发射任何数据正常
        终止（以 onCompleted 的形式），该操作符以备用数据创建一个 Observable 并将数据发射出去。
    </string>

    <string name="str_mainlist_Observable_defer_info">
        defer 操作符是直到有订阅者订阅时，才通过 Observable 的工厂方法创建 Observable 并执行，defer 操作符能够保证 Observable 的状态是最新的
    </string>

    <string name="str_mainlist_Observable_dematerialize_info">
        dematerialize 操作符是 materialize 操作符的逆向过程,将原 Observable 发射的 Notification 对象还原成 Observable 的通知。
        \n\n
        dematerialize 默认不在任何特定的调度器 (Scheduler) 上执行。
    </string>

    <string name="str_mainlist_Observable_distinct_info">
        distinct 操作符对源 Observable 产生的结果进行过滤，把重复的结果过滤掉，只输出不重复的结果给订阅者，非常类似于SQL里的distinct关键字。
    </string>

    <string name="str_mainlist_Observable_distinctUntilChanged_info" formatted="false">
        distinctUntilChanged 操作符对源 Observable 产生的结果进行条件过滤，把与前一个 Observable 某条件重复的结果过滤掉，只输出不重复的结果给订阅者。
    </string>

    <string name="str_mainlist_Observable_elementAt_info" formatted="false">
        elementAt 操作符在源 Observable 产生的结果中，仅仅把指定索引的结果提交给订阅者，索引是从0开始的。
        \n
        elementAtOrDefault 操作符实现当索引结果不存在则发送一个默认数据
    </string>

    <string name="str_mainlist_Observable_empty_info">
        创建一个什么都不做直接发送 onCompleted 的 Observable，不做具体说明了
    </string>

    <string name="str_mainlist_Observable_error_info">
        创建一个什么都不做直接发送 onError 的 Observable，不做具体说明了
    </string>

    <string name="str_mainlist_Observable_exists_info">
        如果源 Observable 发射的数据中有一个满足条件，则 exists 就返回 true，和 all 操作符 类似
    </string>

    <string name="str_mainlist_Observable_filter_info">
        filter 操作符是对源 Observable 产生的结果自定义规则进行过滤，只有满足条件的结果才会提交给订阅者
    </string>

    <string name="str_mainlist_Observable_first_info">
        first 操作符只会返回第一条数据，并且还可以返回满足条件的第一条数据。前面 concat 操作符实现三级缓存的例子里，就是结合 first 操作符来实现。
        \nfirst() 实际最终调用 take(1).single()；
        \nfirst(Func1) 实际最终调用 takeFirst(Func1)。
    </string>

    <string name="str_mainlist_Observable_firstOrDefault_info">
        firstOrDefault 与 first类似，但是在 Observable 没有发射任何数据时发射一个你在参数中指定的默认值。
    </string>

    <string name="str_mainlist_Observable_flatMap_info">
        flatMap 接收一个 Observable 的输出作为输入，同时输出另外一个 Observable。
        可以将数据根据自身需求重新定义规则进行转化后再发射出去。其原理就是将这个 Observable 转化为多个以源 Observable 发射的数据作为源数据的 Observable，
        然后再将这多个 Observable 发射的数据整合发射出来，需要注意的是最后的顺序可能会交错地发射出来，如果对顺序有严格的要求的话可以使用 concatMap 操作符
    </string>

    <string name="str_mainlist_Observable_flatMapIterable_info">
        flatMapIterable 这个变体成对的打包数据，然后生成 Iterable 而不是原始数据和生成的 Observables，但是处理方式是相同的。
    </string>

    <string name="str_mainlist_Observable_forEach_info">
         forEach 为 subscribe 的一个没有返回 Subscription 的别名。也是对Observable进行订阅操作。
    </string>

    <string name="str_mainlist_Observable_from_info">
         from 操作符可以接收一个集合作为参数，然后逐一发送出来。
    </string>

    <string name="str_mainlist_Observable_fromCallable_info">
         fromCallable 操作符，它接受一个 Callable 作为参数，返回一个发射这个 Callable 的结果的 Observable。
    </string>

    <string name="str_mainlist_Observable_groupBy_info">
        groupBy 操作符是对源 Observable 产生的结果进行分组，形成一个类型为 GroupedObservable 的结果集，
        GroupedObservable 中存在一个方法为 getKey()，可以通过该方法获取结果集的Key值（类似于 HashMap 的 key )。
        值得注意的是，由于结果集中的 GroupedObservable 是把分组结果缓存起来，
        如果对每一个 GroupedObservable 不进行处理（既不订阅执行也不对其进行别的操作符运算），就有可能出现内存泄露。
        因此，如果你对某个 GroupedObservable 不进行处理，最好是对其使用操作符take(0)处理。
    </string>

    <string name="str_mainlist_Observable_groupJoin_info">
        groupJoin 操作符和 join 操作符很类似，也是将两个 Observable 产生的结果进行合并，参数上有一些不同。具体看代码例子。
    </string>

    <string name="str_mainlist_Observable_ignoreElements_info">
        ignoreElements操作符抑制原始Observable发射的所有数据，只允许它的终止通知（onError或onCompleted）通过。
        如果你不关心一个 Observable 发射的数据，但是希望在它完成时或遇到错误终止时收到通知，你可以对 Observable 使用 ignoreElements 操作符，它会确保永远不会调用观察者的 onNext() 方法。
    </string>

    <string name="str_mainlist_Observable_interval_info">
        interval 操作符返回一个 Observable，它按固定的时间间隔发射一个无限递增的整数序列。
        可以认为 interval 是一个可以指定线程的加强版 TimerTask
    </string>

    <string name="str_mainlist_Observable_isEmpty_info">
        isEmpty 操作符用来判断源 Observable 是否发射过数据，没有发射过数据返回 true。
    </string>

    <string name="str_mainlist_Observable_join_info">
        join 操作符把类似于 combineLatest 操作符，也是两个 Observable 产生的结果进行合并，
        合并的结果组成一个新的 Observable，但是 join 操作符可以控制每个 Observable 产生结果的生命周期，
        在每个结果的生命周期内，可以与另一个 Observable 产生的结果按照给定的规则进行合并。
    </string>

    <string name="str_mainlist_Observable_just_info">
        just 操作符将传入的若干个数据转化为发射那个数据的 Observable。
        \n
        注意：如果你传递 null 给 just，它会返回一个发射 null 值的 Observable。
        不要误认为它会返回一个空 Observable（完全不发射任何数据的 Observable），如果需要空 Observable 应该使用 empty 操作符。
    </string>

    <string name="str_mainlist_Observable_last_info">
        last 操作符是用来获取最后一个数据或者满足指定条件的最后一个数据。
        \nlast() 实际最终调用 takeLast(1).single()；
    </string>

    <string name="str_mainlist_Observable_lastOrDefault_info">
        lastOrDefault 操作符与 last 类似，不同的是如果原始 Observable 没有发射任何值，lastOrDefault 将会发射指定的默认值。
    </string>

    <string name="str_mainlist_Observable_lift_info">
        lift 方法是 可以让用户执行自定义的 Operator。在 RxJava 中，Observable 中的许多操作符 最终就是调用了 lift。
        不过官方有提醒开发者，运用 lift 的前提是必须熟悉 Operator 的构建，否则可能会导致一些错误。
    </string>

    <string name="str_mainlist_Observable_limit_info">
        limit 操作符用于限制发送数据的个数，实际上 limit 最终是调用 take(int) 这个操作符
    </string>

    <string name="str_mainlist_Observable_map_info">
        map 操作符对原始 Observable 发射的每一项数据根据指定的逻辑进行处理，然后返回一个发射这些结果的 Observable。
    </string>

    <string name="str_mainlist_Observable_materialize_info">
        materialize 操作符将 OnNext/OnError/OnComplete 都转化为一个 Notification 对象并按照原来的顺序发射出来
    </string>

    <string name="str_mainlist_Observable_merge_info">
        merge 操作符可以将多个 Observables 的输出合并，就好像它们是一个单个的 Observable 一样。
        merge 可能会让合并的 Observables 发射的数据交错，如果对顺序有要求的话需要使用 concat 操作符。
        merge 操作中，任何一个原始 Observable 的 onError 通知会被立即传递给观察者，而且会终止合并后的 Observable。
    </string>

    <string name="str_mainlist_Observable_mergeDelayError_info">
        mergeDelayError 操作符会把 Observable 抛出的错误放到所有结果都合并完成之后才执行。
    </string>

    <string name="str_mainlist_Observable_nest_info">
        nest 操作符实际上是把一个源 Observable 通过 just 操作符发射出去。
    </string>

    <string name="str_mainlist_Observable_never_info">
        never 操作符用来创建一个不发射数据，并且也不终止的 Observable。
    </string>

    <string name="str_mainlist_Observable_observeOn_info">
        observeOn 操作符用来指定 Observable 在一个特定的调度器上发送通知给观察者 (调用观察者的 onNext, onCompleted, onError 方法)。
        对于 observeOn 比较重要的一点就是要了解它的作用域，observeOn 作用于在它之后的操作符，直到出现新的 observeOn 操作符。
    </string>

    <string name="str_mainlist_Observable_ofType_info">
        ofType 操作符是 filter 操作符的一个特殊形式。它过滤一个 Observable，只返回指定类型的数据。
    </string>

    <string name="str_mainlist_Observable_onBackpressureBuffer_info">
        onBackpressureBuffer 操作符会缓存所有当前无法消费的数据，直到 Observer 可以处理为止。
    </string>

    <string name="str_mainlist_Observable_onBackpressureDrop_info">
        onBackpressureDrop 操作符会丢弃消费者无法消费的数据。
    </string>

    <string name="str_mainlist_Observable_onBackpressureLatest_info">
        onBackpressureLatest 操作符会丢弃消费者无法消费的数据，但是会返回最后的一个数据。
    </string>

    <string name="str_mainlist_Observable_onErrorResumeNext_info">
        onErrorResumeNext 操作符是在错误或异常发生时拦截这个错误，返回一个 Observable 去执行。
    </string>

    <string name="str_mainlist_Observable_onErrorReturn_info">
        onErrorReturn 操作符是在 Observable 发生错误或异常的时候，拦截错误并执行指定的逻辑，返回一个跟源 Observable 相同类型的结果，最后回调订阅者的 onComplete 方法。
    </string>

    <string name="str_mainlist_Observable_onExceptionResumeNext_info">
        onExceptionResumeNext 操作符与 onErrorResumeNext 操作符类似，同样也是创建并返回一个新的 Observable去执行，
        不同的是，onExceptionResumeNext 只会拦截 Exception 类型的异常，其他的类型如 Error，则不会拦截。
    </string>

    <string name="str_mainlist_Observable_publish_info">
        publish 操作符能将普通的 Observable 转换为可连接的 Observable (ConnectableObservable)。
        ConnectableObservable 与普通的 Observable 差不多，不过它并不会在被订阅时开始发射数据，
        而是直到使用了 connect 操作符时才会开始。用这种方法，你可以在任何时候让一个Observable开始发射数据。
    </string>

    <string name="str_mainlist_Observable_range_info">
        range 操作符能够发射一个指定范围内的有序整数序列。它接受两个参数，一个是范围的起始值，一个是范围的数据的数目。
        如果将第二个参数设为0，将导致 Observable 不发射任何数据（如果设置为负数，会抛异常）。
    </string>

    <string name="str_mainlist_Observable_reduce_info">
        Reduce操作符对原始 Observable 发射数据的第一项应用一个函数，然后再将这个函数的返回值与第二项数据一起传递给函数，
        以此类推，持续这个过程直到原始 Observable 发射它的最后一项数据并终止，此时 reduce 返回的 Observable 发射这个函数返回的最终值。
    </string>

    <string name="str_mainlist_Observable_repeat_info">
        repeat 操作符可以重复的发送源 Observable 的数据序列，可以是无限发送，也可以指定发送次数。
        repeat 操作符默认在 trampoline 调度器上执行。有一个变体可以通过可选参数指定 Scheduler。
    </string>

    <string name="str_mainlist_Observable_repeatWhen_info">
        repeatWhen 操作符 和 repeat 有些相似，不同的是缓存和重放原始 Observable 的数据序列，而是有条件的重新订阅和发射源 Observable。
        将原始 Observable 的终止通知（完成或错误）当做一个 void 数据传递给一个通知处理器，它以此来决定是否要重新订阅和发射源 Observable。
        这个通知处理器就像一个 Observable 操作符，接受一个发射 void 通知的 Observable 为输入，
        返回一个发射 void 数据（意思是，重新订阅和发射源 Observable）或者直接终止（意思是，使用 repeatWhen 终止发射数据）的 Observable。
    </string>

    <string name="str_mainlist_Observable_replay_info">
        replay 操作符 保证所有的观察者收到相同的数据序列，即使它们在Observable开始发射数据之后才订阅。
        \n可连接的Observable (connectable Observable)与普通的Observable差不多，不过它并不会在被订阅时开始发射数据，而是直到使用了Connect操作符时才会开始。用这种方法，你可以在任何时候让一个Observable开始发射数据。
        \n如果在将一个Observable转换为可连接的Observable之前对它使用Replay操作符，产生的这个可连接Observable将总是发射完整的数据序列给任何未来的观察者，即使那些观察者在这个Observable开始给其它观察者发射数据之后才订阅。
    </string>

    <string name="str_mainlist_Observable_retry_info">
        retry 操作符不会将原始 Observable 的 onError 通知传递给观察者，它会订阅这个 Observable，再给它一次机会无错误地完成它的数据序列。
        retry 总是传递 onNext 通知给观察者，由于重新订阅，可能会造成数据项重复。
    </string>

    <string name="str_mainlist_Observable_retryWhen_info">
        retryWhen 和 retry 类似，区别是，retryWhen 将 onError 中的 Throwable 传递给一个函数，
        这个函数产生另一个 Observable ，retryWhen 观察它的结果再决定是不是要重新订阅原始的 Observable。
        如果这个 Observable 发射了一项数据，它就重新订阅，如果这个 Observable 发射的是 onError 通知，它就将这个通知传递给观察者然后终止。
    </string>

    <string name="str_mainlist_Observable_sample_info">
        sample 操作符会定时查看一个 Observable，然后发射自上次采样以来它最近发射的数据。
        在某些实现中，有一个 throttleLast 操作符的功能类似，但不是发射采样期间的最近的数据，而是发射在那段时间内的第一项数据。
        注意：如果自上次采样以来，原始 Observable 没有发射任何数据，这个操作返回的 Observable 在那段时间内也不会发射任何数据。
    </string>

    <string name="str_mainlist_Observable_scan_info">
        scan 操作符对原始 Observable 发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。
        它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列。
    </string>

    <string name="str_mainlist_Observable_sequenceEqual_info">
        sequenceEqual 操作符可以把两个 Observable 作为参数传递给它，它会比较两个 Observable 的发射的数据，
        如果两个序列是相同的（相同的数据，相同的顺序，相同的终止状态），它就发射 true，否则发射 false。
    </string>

    <string name="str_mainlist_Observable_serialize_info">
        一个 Observable 可以异步调用它的观察者的方法，可能是从不同的线程调用。这可能会让 Observable 行为不正确，
        它可能会在某一个onNext调用之前尝试调用 onCompleted 或 onError 方法，或者从两个不同的线程同时调用 onNext 方法。
        使用 serialize 操作符可以纠正这个 Observable 的行为，保证它的行为是正确的且是同步的。
        不具体举例，详情可以查看代码
    </string>

    <string name="str_mainlist_Observable_share_info">
        返回一个新的 Observable，它共享原来的Observable。不具体举例，详情可以查看代码。
    </string>

    <string name="str_mainlist_Observable_single_info">
        single 操作符只会发射源 Observable 中的一个数据，如果使用重载的带过滤条件的函数，则发射符合该过滤条件的那个数据。
        注意，single 和 first 、last 不一样的地方是，single 会检查数据流中是否只包含一个所需要的的数据，如果有多个则会抛出一个错误信息。
        所以 single 适合用来检查数据流中是否有且仅有一个符合条件的数据，并且 single 只有在源 Observable 执行完成后才会返回结果。
    </string>

    <string name="str_mainlist_Observable_singleOrDefault_info">
        singleOrDefault 操作符在 single 的基础上，支持当源 Observable 发送的数据没有符合条件的情况下，可以将指定的默认数据发射出去。
    </string>

    <string name="str_mainlist_Observable_skip_info">
        skip 操作符可以根据指定条件忽略源 Observable 发射的前 N 项数据，只保留之后的数据。
    </string>

    <string name="str_mainlist_Observable_skipLast_info">
        skipLast 操作符和 skip 操作符相反，skipLast 操作符是根据指定条件忽略源 Observable 发射的后 N 项数据，只保留前面的数据。
    </string>

    <string name="str_mainlist_Observable_skipUntil_info">
        skipUntil 操作符订阅原始的 Observable，但是忽略它的发射物，直到第二个Observable发射了一项数据那一刻，它开始发射原始Observable。
    </string>

    <string name="str_mainlist_Observable_skipWhile_info">
        skipWhile 操作符订阅原始的 Observable，但是忽略它的发射物，直到你指定的某个条件变为 false 的那一刻，它开始发射原始 Observable。
    </string>

    <string name="str_mainlist_Observable_sorted_info">
        sorted 操作符可以对源 Observable 发射的数据序列进行排序操作，然后输出排序后的结果。
        目前处于Experimental阶段。
    </string>

    <string name="str_mainlist_Observable_startWith_info">
        startWith 可以在一个 Observable 发射数据之前先发射一个指定的数据序列。（如果想在一个 Observable 发射的数据末尾追加一个数据序列可以使用 concat 操作符。）
    </string>

    <string name="str_mainlist_Observable_subscribe_info">
        subscribe 操作符是连接 Observer 和 Observable 的胶水。一个 Observer 要想看到 Observable 发射的数据项，
        或者想要从 Observable 获取错误和完成通知，它首先必须使用这个操作符订阅那个 Observable。

        \n\nsubscribe操作符的一般实现可能会接受一到三个方法（然后由观察者组合它们），或者接受一个实现了包含这三个方法的接口的对象（有时叫做 Observer 或 Subscriber）：

        \n\n-onNext
        \n　　每当 Observable 发射了一项数据它就会调用这个方法。这个方法的参数是这个 Observable 发射的数据项。

        \n\n-onError
        \n　　Observable 调用这个方法表示它无法生成期待的数据或者遇到了其它错误。这将停止 Observable，它在这之后不会再调用 onNext 或 onCompleted。
        onError 方法的参数是导致这个错误的原因的一个表示（有时可能是一个 Exception 或 Throwable 对象，其它时候也可能是一个简单的字符串，取决于具体的实现）。

        \n\n-onCompleted
        \n　　如果没有遇到任何错误，Observable 在最后一次调用 onCompleted 之后会调用这个方法。

        \n\n如果一个 Observable 直到有一个观察者订阅它才开始发射数据项，就称之为"冷"的 Observable；
        如果一个 Observable 可能在任何时刻开始发射数据，就称之为"热"的 Observable，一个订阅者可能从开始之后的某个时刻开始观察它发射的数据序列，它可能会错过在订阅之前发射的数据。

        \n\n详情请看代码。
    </string>

    <string name="str_mainlist_Observable_subscribeOn_info">
        subscribeOn 操作符 用来指定 Observable 自身在哪个调度器上执行。
        subscribeOn 作用于该操作符之前的 Observable 的创建操符作以及 doOnSubscribe 操作符 ，换句话说就是 doOnSubscribe 以及 Observable 的创建操作符总是被其之后最近的 subscribeOn 控制。
        \n\n详情请看代码。
    </string>

    <string name="str_mainlist_Observable_switchIfEmpty_info">
        switchIfEmpty 操作符支持传递一个 Observable 作为参数，当源 Observable 数据为空的情况下，执行作为参数的 Observable。
    </string>

    <string name="str_mainlist_Observable_switchMap_info">
        switchMap 操作符与 flatMap 操作符类似，都是把 Observable 产生的结果转换成多个 Observable，然后把这多个 Observable “扁平化”成一个 Observable，并依次提交产生的结果给订阅者。
        但是与 flatMap 操作符不同的是，switchMap 操作符会保存最新的 Observable 产生的结果而舍弃旧的结果。
    </string>

    <string name="str_mainlist_Observable_switchOnNext_info">
        switchOnNext 操作符订阅一个发射多个 Observables 的 Observable。它每次观察那些 Observables 中的一个，
        switchOnNext 返回的这个 Observable 取消订阅前一个发射数据的 Observable，开始发射最近的 Observable 发射的数据。
        注意：当原始 Observable 发射了一个新的 Observable 时（不是这个新的 Observable 发射了一条数据时），
        它将取消订阅之前的那个 Observable。这意味着，在后来那个 Observable 产生之后到它开始发射数据之前的这段时间里，
        前一个 Observable 发射的数据将被丢弃（就像图例上的那个黄色圆圈一样）。
    </string>

    <string name="str_mainlist_Observable_take_info">
        take 操作符让可以根据条件只返回源 Observable 前面的N项数据，然后发射完成通知，忽略剩余的数据。limit 操作符实际上也是调用 take操作符。
        有一点需要注意，如果对一个 Observable 使用 take(n)（或limit(n)）操作符，而那个 Observable 发射的数据少于N项，
        那么 take 操作生成的 Observable 不会抛异常或发射 onError 通知。
    </string>

    <string name="str_mainlist_Observable_takeFirst_info">
        takeFirst 操作符根据指定条件返回 Observable 发射的数据中，第一个满足这个条件的数据。 first(Func1) 实际上就是调用的 takeFirst 操作符。
    </string>

    <string name="str_mainlist_Observable_takeLast_info">
        takeLast 操作符可以根据指定条件，只发射原始 Observable 发射的后N项数据，忽略之前的数据。注意：这会延迟原始 Observable 发射的任何数据项，直到它全部完成。
    </string>

    <string name="str_mainlist_Observable_takeLastBuffer_info">
        takeLastBuffer 操作符和 takeLast 类似，唯一的不同是它把所有的数据项收集到一个 List 再发射，而不是依次发射一个。
    </string>

    <string name="str_mainlist_Observable_takeUntil_info">
        takeUntil 操作符订阅并开始发射原始 Observable，直到指定条件满足时就终至发射。
        \n\ntakeUntil(Func2) 使用一个谓词函数而不是第二个 Observable 来判定是否需要终止发射数据，它的行为类似于 takeWhile。
        \n\ntakeUntil(Observable)，订阅并开始发射原始 Observable，它还监视你提供的第二个 Observable。如果第二个 Observable 发射了一项数据或者发射了一个终止通知，takeUntil 返回的 Observable 会停止发射原始 Observable 并终止。
        \n注意：第二个 Observable 发射一项数据或一个 onError 通知或一个 onCompleted 通知都会导致 takeUntil 停止发射数据。
    </string>

    <string name="str_mainlist_Observable_takeWhile_info">
        takeWhile 操作符返回一个镜像原始 Observable 行为的 Observable，直到某一项数据你指定的函数返回 false 那一刻，这个新的 Observable 发射 onCompleted 终止通知。
    </string>

    <string name="str_mainlist_Observable_throttleFirst_info">
        throttleFirst 操作符允许设置一个时间长度，之后它会发送固定时间长度内的第一个事件，而屏蔽其它事件，在间隔达到设置的时间后，可以再发送下一个事件。
    </string>

    <string name="str_mainlist_Observable_throttleLast_info">
        throttleLast 操作符实际上最终调用的是 sample(long, TimeUnit)，定时查看一个 Observable，然后发射自上次采样以来它最近发射的数据。
    </string>

    <string name="str_mainlist_Observable_throttleWithTimeout_info">
        throttleWithTimeout 操作符实际上调用的是 debounce(long, TimeUnit)，对源 Observable 每产生一个结果后，如果在规定的间隔时间内没有别的结果产生，则把这个结果提交给订阅者处理，否则忽略该结果。
    </string>

    <string name="str_mainlist_Observable_timeInterval_info">
        timeInterval 操作符将原始 Observable 转换为另一个 Obserervable，后者发射一个标志替换前者的数据项，
        这个标志表示前者的两个连续发射物之间流逝的时间长度。新的 Observable 的第一个发射物表示的是在观察者订阅
        原始 Observable 到原始 Observable 发射它的第一项数据之间流逝的时间长度。不存在与原始 Observable 发射最后一项数据和发射 onCompleted 通知之间时长对应的发射物。
    </string>

    <string name="str_mainlist_Observable_timeout_info">
        timeout 操作符对原始 Observable 的一个镜像，如果过了一个指定的时长仍没有发射数据，它会发一个错误通知或者指定一个备用 Observable 执行。
    </string>

    <string name="str_mainlist_Observable_timer_info">
        timer 操作符返回一个 Observable，它在延迟一段给定的时间后发射一个简单的数字 0。它默认在 computation 调度器上执行，也可以通过可选参数指定 Scheduler。
    </string>

    <string name="str_mainlist_Observable_timestamp_info">
        timestamp，它将一个发射T类型数据的Observable转换为一个发射类型为Timestamped&lt;T&gt;的数据的Observable，每一项都包含数据的原始发射时间。
        timestamp默认在immediate调度器上执行，但是可以通过参数指定其它的调度器。
    </string>

    <string name="str_mainlist_Observable_to_info">
        to 操作符将 Observable 转换为另一个对象或数据结构。目前为 Experimental 版本。
    </string>

    <string name="str_mainlist_Observable_toBlocking_info">
        toBlocking 操作符可以将 Observable 转换为一个 BlockingObservable。
    </string>

    <string name="str_mainlist_Observable_toCompletable_info">
        toCompletable 操作符可以将 Observable 转换为一个 Completable。
    </string>

    <string name="str_mainlist_Observable_toList_info">
        toList 操作符会改变 Observable 的行为，让 Observable 将多项数据组合成一个 List，然后调用一次 onNext 方法传递整个列表。
        如果原始 Observable 没有发射任何数据就调用了 onCompleted，toList 返回的 Observable 会在调用 onCompleted 之前发射一个空列表。
        如果原始 Observable 调用了 onError，toList 返回的 Observable 会立即调用它的观察者的 onError 方法。
        toList 默认不在任何特定的调度器上执行。
    </string>

    <string name="str_mainlist_Observable_toMap_info">
        toMap 操作符可以收集原始 Observable 发射的所有数据项到一个 Map（默认是 HashMap ）然后发射这个 Map。
        你可以提供一个用于生成 Map 的 Key 的函数，还可以提供一个函数转换数据项到 Map 存储的值（默认数据项本身就是值）。
        toMap 默认不在任何特定的调度器上执行。
    </string>

    <string name="str_mainlist_Observable_toMultiMap_info">
        toMultiMap 操作符类似于 toMap，不同的是它生成的这个 Map 同时还是一个 ArrayList（默认是这样，你可以传递一个可选的工厂方法修改这个行为）。
        toMultiMap 默认不在任何特定的调度器上执行。
    </string>

    <string name="str_mainlist_Observable_toSingle_info">
        toSingle 操作符可以将一个发射单个值的 Observable 转换为一个 Single。 如果原始 Observable 会发送多个值，Single 将会发出 onError 通知。
    </string>

    <string name="str_mainlist_Observable_toSortedList_info">
        toSortedList 操作符类似于 toList，不同的是它会对产生的列表排序，默认是自然升序，如果发射的数据项没有实现Comparable接口，会抛出一个异常。
        然而，你也可以传递一个函数作为用于比较两个数据项，此时 toSortedList 不会使用 Comparable 接口。
        toSortedList 默认不在任何特定的调度器上执行。
    </string>

    <string name="str_mainlist_Observable_unsafeSubscribe_info">
        unsafeSubscribe 操作符就像字面意思一样，是一个不安全的订阅操作，因为该函数不会因为源 Observable 的 onError 或 onCompleted 而自动取消订阅。
        所以这个操作符几乎没用，它应该仅仅在自定义操作函数中处理嵌套订阅的情况。前面也有例子说到，如果要避免这种操作符接受到不合法的数据流，我们可以用 serialize 操作符。
    </string>

    <string name="str_mainlist_Observable_unsubscribeOn_info">
        unsubscribeOn 操作符可以让 unsubscribe 在指定的调度器上执行。
    </string>

    <string name="str_mainlist_Observable_using_info">
        using 操作符让你可以指示 Observable 创建一个只在它的生命周期内存在的资源，当 Observable 终止时这个资源会被自动释放。
    </string>

    <string name="str_mainlist_Observable_window_info">
        window 操作符会定期将来自原始 Observable 的数据分解为一个 Observable 窗口，发射这些窗口，而不是每次发射一项数据。
        window 和 buffer 类似，但不是发射来自原始 Observable 的数据包，它发射的是 Observables，这些 Observables 中的每一个都发射原始 Observable 数据的一个子集，最后发射一个 onCompleted 通知。
        和 buffer 一样，window 有很多变体，每一种都以自己的方式将原始 Observable 分解为多个作为结果的 Observable，每一个都包含一个映射原始数据的 window。
        用 window 操作符的术语描述就是，当一个窗口打开(when a window "opens")意味着一个新的 Observable 已经发射（产生）了，而且这个 Observable 开始发射来自原始Observable的数据；
        当一个窗口关闭(when a window "closes")意味着发射(产生)的 Observable 停止发射原始 Observable 的数据，并且发射终止通知 onCompleted 给它的观察者们。
    </string>

    <string name="str_mainlist_Observable_withLatestFrom_info">
        withLatestFrom 操作符类似于 combineLatest，但是只在单个原始 Observable 发射了一条数据时才发射数据。目前还是 Experimental 版本。
    </string>

    <string name="str_mainlist_Observable_zip_info">
        zip 操作符返回一个 Obversable，它使用这个函数按顺序结合两个或多个 Observables 发射的数据项，然后它发射这个函数返回的结果。
        它按照严格的顺序应用这个函数。它只发射与发射数据项最少的那个 Observable 一样多的数据。
    </string>

    <string name="str_mainlist_Observable_zipWith_info">
        zipWith 操作符和 zip 类似，但是 zipWith 是以链式写法逐个拼凑想要合并的对象。
    </string>















</resources>