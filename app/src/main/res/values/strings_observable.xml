<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Observable -->
    <string name="str_mainlist_Observable">Observable</string>
    <string name="str_mainlist_Observable_all">Observable all</string>
    <string name="str_mainlist_Observable_amb">Observable amb</string>
    <string name="str_mainlist_Observable_asObservable">Observable asObservable</string>
    <string name="str_mainlist_Observable_buffer">Observable buffer</string>
    <string name="str_mainlist_Observable_cast">Observable cast</string>
    <string name="str_mainlist_Observable_cache">Observable cache</string>
    <string name="str_mainlist_Observable_collect">Observable collect</string>
    <string name="str_mainlist_Observable_combineLatest">Observable combineLatest</string>
    <string name="str_mainlist_Observable_compose">Observable compose</string>
    <string name="str_mainlist_Observable_concat">Observable concat</string>
    <string name="str_mainlist_Observable_concatMap">Observable concatMap</string>
    <string name="str_mainlist_Observable_contains">Observable contains</string>
    <string name="str_mainlist_Observable_count">Observable count</string>
    <string name="str_mainlist_Observable_create">Observable create</string>
    <string name="str_mainlist_Observable_debounce">Observable debounce</string>
    <string name="str_mainlist_Observable_defaultIfEmpty">Observable defaultIfEmpty</string>
    <string name="str_mainlist_Observable_defer">Observable defer</string>
    <string name="str_mainlist_Observable_delay">Observable delay</string>
    <string name="str_mainlist_Observable_dematerialize">Observable dematerialize</string>
    <string name="str_mainlist_Observable_distinct">Observable distinct</string>
    <string name="str_mainlist_Observable_distinctUntilChanged">Observable distinctUntilChanged</string>
    <string name="str_mainlist_Observable_elementAt">Observable elementAt</string>
    <string name="str_mainlist_Observable_empty">Observable empty</string>
    <string name="str_mainlist_Observable_error">Observable error</string>
    <string name="str_mainlist_Observable_exists">Observable exists</string>
    <string name="str_mainlist_Observable_filter">Observable filter</string>
    <string name="str_mainlist_Observable_first">Observable first</string>
    <string name="str_mainlist_Observable_firstOrDefault">Observable firstOrDefault</string>
    <string name="str_mainlist_Observable_flatMap">Observable flatMap</string>
    <string name="str_mainlist_Observable_flatMapIterable">Observable flatMapIterable</string>
    <string name="str_mainlist_Observable_forEach">Observable forEach</string>
    <string name="str_mainlist_Observable_from">Observable from</string>
    <string name="str_mainlist_Observable_fromCallable">Observable fromCallable</string>
    <string name="str_mainlist_Observable_groupBy">Observable groupBy</string>
    <string name="str_mainlist_Observable_groupJoin">Observable groupJoin</string>
    <string name="str_mainlist_Observable_ignoreElements">Observable ignoreElements</string>
    <string name="str_mainlist_Observable_interval">Observable interval</string>
    <string name="str_mainlist_Observable_isEmpty">Observable isEmpty</string>
    <string name="str_mainlist_Observable_join">Observable join</string>
    <string name="str_mainlist_Observable_just">Observable just</string>
    <string name="str_mainlist_Observable_last">Observable last</string>
    <string name="str_mainlist_Observable_lift">Observable lift</string>
    <string name="str_mainlist_Observable_lastOrDefault">Observable lastOrDefault</string>
    <string name="str_mainlist_Observable_limit">Observable limit</string>
    <string name="str_mainlist_Observable_map">Observable map</string>
    <string name="str_mainlist_Observable_materialize">Observable materialize</string>
    <string name="str_mainlist_Observable_merge">Observable merge</string>
    <string name="str_mainlist_Observable_mergeDelayError">Observable mergeDelayError</string>
    <string name="str_mainlist_Observable_nest">Observable nest</string>
    <string name="str_mainlist_Observable_never">Observable never</string>
    <string name="str_mainlist_Observable_observeOn">Observable observeOn</string>
    <string name="str_mainlist_Observable_ofType">Observable ofType</string>
    <string name="str_mainlist_Observable_onBackpressureBuffer">Observable onBackpressureBuffer</string>
    <string name="str_mainlist_Observable_onBackpressureDrop">Observable onBackpressureDrop</string>
    <string name="str_mainlist_Observable_onBackpressureLatest">Observable onBackpressureLatest</string>
    <string name="str_mainlist_Observable_onErrorResumeNext">Observable onErrorResumeNext</string>
    <string name="str_mainlist_Observable_onErrorReturn">Observable onErrorReturn</string>
    <string name="str_mainlist_Observable_onExceptionResumeNext">Observable onExceptionResumeNext</string>
    <string name="str_mainlist_Observable_publish">Observable publish</string>
    <string name="str_mainlist_Observable_range">Observable range</string>
    <string name="str_mainlist_Observable_reduce">Observable reduce</string>
    <string name="str_mainlist_Observable_repeat">Observable repeat</string>
    <string name="str_mainlist_Observable_repeatWhen">Observable repeatWhen</string>
    <string name="str_mainlist_Observable_replay">Observable replay</string>
    <string name="str_mainlist_Observable_retry">Observable retry</string>
    <string name="str_mainlist_Observable_retryWhen">Observable retryWhen</string>
    <string name="str_mainlist_Observable_sample">Observable sample</string>
    <string name="str_mainlist_Observable_scan">Observable scan</string>
    <string name="str_mainlist_Observable_sequenceEqual">Observable sequenceEqual</string>
    <string name="str_mainlist_Observable_serialize">Observable serialize</string>
    <string name="str_mainlist_Observable_share">Observable share</string>
    <string name="str_mainlist_Observable_single">Observable single</string>
    <string name="str_mainlist_Observable_singleOrDefault">Observable singleOrDefault</string>
    <string name="str_mainlist_Observable_skip">Observable skip</string>
    <string name="str_mainlist_Observable_skipLast">Observable skipLast</string>
    <string name="str_mainlist_Observable_skipUntil">Observable skipUntil</string>
    <string name="str_mainlist_Observable_skipWhile">Observable skipWhile</string>
    <string name="str_mainlist_Observable_sorted">Observable sorted</string>
    <string name="str_mainlist_Observable_startWith">Observable startWith</string>
    <string name="str_mainlist_Observable_subscribe">Observable subscribe</string>
    <string name="str_mainlist_Observable_subscribeOn">Observable subscribeOn</string>
    <string name="str_mainlist_Observable_switchIfEmpty">Observable switchIfEmpty</string>
    <string name="str_mainlist_Observable_switchMap">Observable switchMap</string>
    <string name="str_mainlist_Observable_switchOnNext">Observable switchOnNext</string>
    <string name="str_mainlist_Observable_take">Observable take</string>
    <string name="str_mainlist_Observable_takeFirst">Observable takeFirst</string>
    <string name="str_mainlist_Observable_takeLast">Observable takeLast</string>
    <string name="str_mainlist_Observable_takeLastBuffer">Observable takeLastBuffer</string>








    <string name="str_mainlist_Observable_create_info">
        Returns an Observable that will execute the specified function when a Subscriber subscribes to it.
    </string>

    <string name="str_mainlist_Observable_all_info">
        Returns an Observable that emits a Boolean that indicates whether all of the items emitted by the source Observable satisfy a condition.
    </string>

    <string name="str_mainlist_Observable_amb_info">
        <![CDATA[
        amb(Iterable):\n
        Mirrors the one Observable in an Iterable of several Observables that first either emits an item or sends a termination notification.
        \n\n
        amb(Observable<? extends R> o1, Observable<? extends R> o2 , â€¦,Observable<? extends R> o9)\n
        Given up to nine Observables, mirrors the one that first either emits an item or sends a termination notification.
        \n\n
        ambWith(Observable)
        Mirrors the Observable (current or provided) that first either emits an item or sends a termination notification.
        ]]>
    </string>

    <string name="str_mainlist_Observable_asObservable_info">
        Portrays a object of an Observable subclass as a simple Observable object.
    </string>

    <string name="str_mainlist_Observable_buffer_info">
        Returns an Observable that emits buffers of items it collects from the source Observable.
    </string>

    <string name="str_mainlist_Observable_cache_info">
        <![CDATA[
        cache()
        \nReturns an Observable that subscribes to this Observable lazily, caches all of its events and replays them, in the same order as received, to all the downstream subscribers.
        \nOcacheWithInitialCapacity(int initialCapacity)
        \nReturns an Observable that subscribes to this Observable lazily, caches all of its events and replays them, in the same order as received, to all the downstream subscribers.
        ]]>
    </string>


    <string name="str_mainlist_Observable_cast_info">
        Returns an Observable that emits the items emitted by the source Observable, converted to the specified type.
    </string>

    <string name="str_mainlist_Observable_collect_info">
        Collects items emitted by the source Observable into a single mutable data structure and returns an Observable that emits this structure.
    </string>

    <string name="str_mainlist_Observable_combineLatest_info">
        Combines five source Observables by emitting an item that aggregates the latest values of
        each of the source Observables each time an item is received from any of the source
        Observables, where this aggregation is defined by a specified function.
    </string>

    <string name="str_mainlist_Observable_compose_info">
        Transform an Observable by applying a particular Transformer function to it.
    </string>

    <string name="str_mainlist_Observable_concat_info">
        Flattens an Iterable of Observables into one Observable, one after the other, without interleaving them.
    </string>

    <string name="str_mainlist_Observable_concatMap_info">
        Returns a new Observable that emits items resulting from applying a function that
        you supply to each item emitted by the source Observable, where that function returns
        an Observable, and then emitting the items that result from concatenating those resulting Observables.
    </string>

    <string name="str_mainlist_Observable_contains_info">
        Returns an Observable that emits a Boolean that indicates whether the source Observable emitted a specified item.
    </string>

    <string name="str_mainlist_Observable_count_info">
        Returns an Observable that emits the count of the total number of items emitted by the source Observable.
    </string>

    <string name="str_mainlist_Observable_debounce_info">
        <![CDATA[
        debounce(Func1)
        \nReturns an Observable that mirrors the source Observable, except that it drops items emitted by the source Observable that are followed by another item within a computed debounce duration.
        \ndebounce(long, TimeUnit unit)
        \nReturns an Observable that mirrors the source Observable, except that it drops items emitted by the source Observable that are followed by newer items before a timeout value expires.
        \ndebounce(long, TimeUnit, Scheduler)
        \nReturns an Observable that mirrors the source Observable, except that it drops items emitted by the source Observable that are followed by newer items before a timeout value expires on a specified Scheduler.
        ]]>
    </string>

    <string name="str_mainlist_Observable_defaultIfEmpty_info">
        Returns an Observable that emits the items emitted by the source Observable or a specified default item if the source Observable is empty.
    </string>

    <string name="str_mainlist_Observable_delay_info">
        <![CDATA[
        delay(Func0, Func1)
        \nReturns an Observable that delays the subscription to and emissions from the source Observable via another Observable on a per-item basis.
        \ndelay(Func1)
        \nReturns an Observable that delays the emissions of the source Observable via another Observable on a per-item basis.
        \ndelay(long, TimeUnit)
        \nReturns an Observable that emits the items emitted by the source Observable shifted forward in time by a specified delay.
        \ndelay(long, TimeUnit, Scheduler)
        \nReturns an Observable that emits the items emitted by the source Observable shifted forward in time by a specified delay.
        \ndelaySubscription(Func0)
        \nReturns an Observable that delays the subscription to the source Observable until a second Observable emits an item.
        \ndelaySubscription(long, TimeUnit)
        \nReturns an Observable that delays the subscription to the source Observable by a given amount of time.
        \ndelaySubscription(long, TimeUnit, Scheduler)
        \nReturns an Observable that delays the subscription to the source Observable by a given amount of time, both waiting and subscribing on a given Scheduler.
        \ndelaySubscription(Observable)
        \nReturns an Observable that delays the subscription to this Observable until the other Observable emits an element or completes normally.
        ]]>
    </string>

    <string name="str_mainlist_Observable_dematerialize_info">
        Returns an Observable that reverses the effect of materialize by transforming the
        Notification objects emitted by the source Observable into the items or notifications they represent.
    </string>

    <string name="str_mainlist_Observable_distinct_info">
        <![CDATA[
        distinct()
        \nReturns an Observable that emits all items emitted by the source Observable that are distinct.
        \ndistinct(Func1)
        \nReturns an Observable that emits all items emitted by the source Observable that are distinct according to a key selector function.
        ]]>
    </string>

    <string name="str_mainlist_Observable_distinctUntilChanged_info">
        <![CDATA[
        distinctUntilChanged()
        \nReturns an Observable that emits all items emitted by the source Observable that are distinct from their immediate predecessors.
        \ndistinctUntilChanged(Func1)
        \nReturns an Observable that emits all items emitted by the source Observable that are distinct from their immediate predecessors, according to a key selector function.
        \ndistinctUntilChanged(Func2)
        \nReturns an Observable that emits all items emitted by the source Observable that are distinct from their immediate predecessors when compared with each other via the provided comparator function.
        ]]>
    </string>

    <string name="str_mainlist_Observable_elementAt_info">
        <![CDATA[
        elementAt(int)
        \nReturns an Observable that emits the single item at a specified index in a sequence of emissions from a source Observable.
        \nelementAtOrDefault(int, R)
        \nReturns an Observable that emits the item found at a specified index in a sequence of emissions from a source Observable, or a default item if that index is out of range.
        ]]>
    </string>

    <string name="str_mainlist_Observable_empty_info">
        Returns an Observable that emits no items to the Observer and immediately invokes its onCompleted method.
    </string>

    <string name="str_mainlist_Observable_error_info">
        Returns an Observable that invokes an Observer\'s onError method when the Observer subscribes to it.
    </string>

    <string name="str_mainlist_Observable_exists_info">
        Returns an Observable that emits true if any item emitted by the source Observable satisfies a specified condition, otherwise false.
    </string>

    <string name="str_mainlist_Observable_filter_info">
        Filters items emitted by an Observable by only emitting those that satisfy a specified predicate.
    </string>

    <string name="str_mainlist_Observable_first_info">
        <![CDATA[
        first()
        /nReturns an Observable that emits only the very first item emitted by the source Observable, or notifies of an NoSuchElementException if the source Observable is empty.
        /nfirst(Func1)
        /nReturns an Observable that emits only the very first item emitted by the source Observable that satisfies a specified condition, or notifies of an NoSuchElementException if no such items are emitted.
        ]]>
    </string>

    <string name="str_mainlist_Observable_firstOrDefault_info">
        <![CDATA[
        firstOrDefault(T defaultValue)
        \nReturns an Observable that emits only the very first item emitted by the source Observable, or a default item if the source Observable completes without emitting anything.
        \nfirstOrDefault(T, Func1)
        \nReturns an Observable that emits only the very first item emitted by the source Observable that satisfies a specified condition, or a default item if the source Observable emits no such items.
        ]]>
    </string>

    <string name="str_mainlist_Observable_flatMap_info">
        <![CDATA[
        flatMap(Func1)
        \nReturns an Observable that emits items based on applying a function that you supply to each item emitted by the source Observable, where that function returns an Observable, and then merging those resulting Observables and emitting the results of this merger.
        \nflatMap(Func1, Func1, Func0)
        \nReturns an Observable that applies a function to each item emitted or notification raised by the source Observable and then flattens the Observables returned from these functions and emits the resulting items.
        \nflatMap(Func1, Func1, Func0, int)
        \nReturns an Observable that applies a function to each item emitted or notification raised by the source Observable and then flattens the Observables returned from these functions and emits the resulting items, while limiting the maximum number of concurrent subscriptions to these Observables.
        \nflatMap(Func1, int)
        \nReturns an Observable that emits items based on applying a function that you supply to each item emitted by the source Observable, where that function returns an Observable, and then merging those resulting Observables and emitting the results of this merger, while limiting the maximum number of concurrent subscriptions to these Observables.
        \nflatMap(Func1, Func2)
        \nReturns an Observable that emits the results of a specified function to the pair of values emitted by the source Observable and a specified collection Observable.
        \nflatMap(Func1, Func2, int)
        \nReturns an Observable that emits the results of a specified function to the pair of values emitted by the source Observable and a specified collection Observable, while limiting the maximum number of concurrent subscriptions to these Observables.
        ]]>
    </string>

    <string name="str_mainlist_Observable_flatMapIterable_info">
        <![CDATA[
        flatMapIterable(Func1)
        \nReturns an Observable that merges each item emitted by the source Observable with the values in an Iterable corresponding to that item that is generated by a selector.
        \nflatMapIterable(Func1, int)
        \nReturns an Observable that merges each item emitted by the source Observable with the values in an Iterable corresponding to that item that is generated by a selector, while limiting the number of concurrent subscriptions to these Observables.
        \nflatMapIterable(Func1, Func2)
        \nReturns an Observable that emits the results of applying a function to the pair of values from the source Observable and an Iterable corresponding to that item that is generated by a selector.
        \nflatMapIterable(Func1, Func2, int)
        \nReturns an Observable that emits the results of applying a function to the pair of values from the source Observable and an Iterable corresponding to that item that is generated by a selector, while limiting the number of concurrent subscriptions to these Observables.
        ]]>
    </string>

    <string name="str_mainlist_Observable_forEach_info">
        <![CDATA[
        forEach(Action1)
        \nSubscribes to the Observable and receives notifications for each element.
        \nforEach(Action1, Action1)
        \nSubscribes to the Observable and receives notifications for each element and error events.
        \nforEach(Action1<, Action1, Action0)
        \nSubscribes to the Observable and receives notifications for each element and the terminal events.
        ]]>
    </string>

    <string name="str_mainlist_Observable_from_info">
        <![CDATA[
        from(Future)
        \nConverts a Future into an Observable.
        \nfrom(Future, long, TimeUnit)
        \nConverts a Future into an Observable, with a timeout on the Future.
        \nfrom(Future, Scheduler)
        \nConverts a Future, operating on a specified Scheduler, into an Observable.
        \nfrom(Iterable)
        \nConverts an Iterable sequence into an Observable that emits the items in the sequence.
        \nfrom(T[])
        \nConverts an Array into an Observable that emits the items in the Array.
        ]]>
    </string>

    <string name="str_mainlist_Observable_fromCallable_info">
        Returns an Observable that, when an observer subscribes to it, invokes a function you specify and then emits the value returned from that function.
    </string>

    <string name="str_mainlist_Observable_groupBy_info">
        <![CDATA[
        groupBy(Func1)
        \nGroups the items emitted by an Observable according to a specified criterion, and emits these grouped items as GroupedObservables.
        \ngroupBy(Func1, Func1)
        \nGroups the items emitted by an Observable according to a specified criterion, and emits these grouped items as GroupedObservables.
        \ngroupBy(Func1, Func1, Func1)
        \nGroups the items emitted by an Observable according to a specified criterion, and emits these grouped items as GroupedObservables.
        ]]>
    </string>

    <string name="str_mainlist_Observable_groupJoin_info">
        Returns an Observable that correlates two Observables when they overlap in time and groups the results.
    </string>

    <string name="str_mainlist_Observable_ignoreElements_info">
        Ignores all items emitted by the source Observable and only calls onCompleted or onError.
    </string>

    <string name="str_mainlist_Observable_interval_info">
        <![CDATA[
        interval(long, long, TimeUnit, Scheduler)
        \nReturns an Observable that emits a 0L after the initialDelay and ever increasing numbers after each period of time thereafter, on a specified Scheduler.
        \ninterval(long, TimeUnit)
        \nReturns an Observable that emits a sequential number every specified interval of time.
        \n\ninterval(long, TimeUnit, Scheduler)
        \nReturns an Observable that emits a sequential number every specified interval of time, on a specified Scheduler.
        ]]>
    </string>

    <string name="str_mainlist_Observable_isEmpty_info">
        Returns an Observable that emits true if the source Observable is empty, otherwise false.
    </string>

    <string name="str_mainlist_Observable_join_info">
        Correlates the items emitted by two Observables based on overlapping durations.
    </string>

    <string name="str_mainlist_Observable_just_info">
        Converts some items into an Observable that emits those items.
    </string>

    <string name="str_mainlist_Observable_last_info">
        <![CDATA[
        last():
        \nReturns an Observable that emits the last item emitted by the source Observable or notifies observers of a NoSuchElementException if the source Observable is empty.
        \n\nlast(Func1):
        \nReturns an Observable that emits only the last item emitted by the source Observable that satisfies a given condition, or notifies of a NoSuchElementException if no such items are emitted.
        ]]>
    </string>

    <string name="str_mainlist_Observable_lastOrDefault_info">
        <![CDATA[
        lastOrDefault(T):
        \nReturns an Observable that emits only the last item emitted by the source Observable, or a default item if the source Observable completes without emitting any items.
        \n\nlastOrDefault(T, Func1):
        \nReturns an Observable that emits only the last item emitted by the source Observable that satisfies a specified condition, or a default item if no such item is emitted by the source Observable.
        ]]>
    </string>

    <string name="str_mainlist_Observable_lift_info">
        This method requires advanced knowledge about building operators;
        please consider other standard composition methods first; Lifts a function to the current
        Observable and returns a new Observable that when subscribed to will pass the values
        of the current Observable through the Operator function.
    </string>

    <string name="str_mainlist_Observable_limit_info">
        Returns an Observable that emits only the first count items emitted by the source Observable.
    </string>

    <string name="str_mainlist_Observable_map_info">
        Returns an Observable that applies a specified function to each item emitted by the source Observable and emits the results of these function applications.
    </string>

    <string name="str_mainlist_Observable_materialize_info">
        Returns an Observable that represents all of the emissions and notifications from the source Observable into emissions marked with their original types within Notification objects.
    </string>

    <string name="str_mainlist_Observable_merge_info">
        Flattens some Observables into a single Observable, without any transformation.
    </string>

    <string name="str_mainlist_Observable_mergeDelayError_info">
        Flattens some Observables into one Observable, in a way that allows an Observer to receive
        all successfully emitted items from each of the source Observables without being interrupted
        by an error notification from one of them.
    </string>

    <string name="str_mainlist_Observable_nest_info">
        <![CDATA[
        Converts the source Observable<T> into an Observable<Observable<T>> that emits the source Observable as its single emission.
        ]]>
    </string>


    <string name="str_mainlist_Observable_never_info">
        Returns an Observable that never sends any items or notifications to an Observer.
    </string>

    <string name="str_mainlist_Observable_observeOn_info">
        <![CDATA[
        observeOn(Scheduler):
        \nModifies an Observable to perform its emissions and notifications on a specified Scheduler, asynchronously with a bounded buffer of RxRingBuffer.SIZE slots.
        \n\nobserveOn(Scheduler, boolean):
        \nModifies an Observable to perform its emissions and notifications on a specified Scheduler, asynchronously with a bounded buffer and optionally delays onError notifications.
        \n\nobserveOn(Scheduler, boolean, int):
        \nModifies an Observable to perform its emissions and notifications on a specified Scheduler, asynchronously with a bounded buffer of configurable size and optionally delays onError notifications.
        \n\nobserveOn(Scheduler, int):
        \nModifies an Observable to perform its emissions and notifications on a specified Scheduler, asynchronously with a bounded buffer of configurable size.
        ]]>
    </string>

    <string name="str_mainlist_Observable_ofType_info">
        Filters the items emitted by an Observable, only emitting those of the specified type.
    </string>

    <string name="str_mainlist_Observable_onBackpressureBuffer_info">
        <![CDATA[
        onBackpressureBuffer():
        \nInstructs an Observable that is emitting items faster than its observer can consume them to buffer these items indefinitely until they can be emitted.
        \n\nonBackpressureBuffer(long):
        \nInstructs an Observable that is emitting items faster than its observer can consume them to buffer up to a given amount of items until they can be emitted.
        \n\nonBackpressureBuffer(long, Action0):
        \nInstructs an Observable that is emitting items faster than its observer can consume them to buffer up to a given amount of items until they can be emitted.
        ]]>
    </string>

    <string name="str_mainlist_Observable_onBackpressureDrop_info">
        <![CDATA[
        onBackpressureDrop():
        \nInstructs an Observable that is emitting items faster than its observer can consume them to discard, rather than emit, those items that its observer is not prepared to observe.
        \n\nonBackpressureDrop(Action1)
        \n\nInstructs an Observable that is emitting items faster than its observer can consume them to discard, rather than emit, those items that its observer is not prepared to observe.
        ]]>
    </string>

    <string name="str_mainlist_Observable_onBackpressureLatest_info">
        Instructs an Observable that is emitting items faster than its observer can consume them to hold onto the latest value and emit that on request.
    </string>

    <string name="str_mainlist_Observable_onErrorResumeNext_info">
        <![CDATA[
        onErrorResumeNext(Func1):
        \nInstructs an Observable to pass control to another Observable rather than invoking onError if it encounters an error.
        \n\nObservable<T>	onErrorResumeNext(Observable<? extends T> resumeSequence):
        \nInstructs an Observable to pass control to another Observable rather than invoking onError if it encounters an error.
        ]]>
    </string>

    <string name="str_mainlist_Observable_onErrorReturn_info">
        Instructs an Observable to emit an item (returned by a specified function) rather than invoking onError if it encounters an error.
    </string>

    <string name="str_mainlist_Observable_onExceptionResumeNext_info">
        Instructs an Observable to pass control to another Observable rather than invoking onError if it encounters an Exception.
    </string>

    <string name="str_mainlist_Observable_publish_info">
        <![CDATA[
        publish():
        \nReturns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called before it begins emitting items to those Observers that have subscribed to it.
        \n\npublish(Func1)
        \nReturns an Observable that emits the results of invoking a specified selector on items emitted by a ConnectableObservable that shares a single subscription to the underlying sequence.
        ]]>
    </string>

    <string name="str_mainlist_Observable_range_info">
        <![CDATA[
        range(int, int)
        \nReturns an Observable that emits a sequence of Integers within a specified range.
        \n\nrange(int, int, Scheduler)
        \nReturns an Observable that emits a sequence of Integers within a specified range, on a specified Scheduler.
        ]]>
    </string>

    <string name="str_mainlist_Observable_reduce_info">
        <![CDATA[
        reduce(Func2)
        \nReturns an Observable that applies a specified accumulator function to the first item emitted by a source Observable, then feeds the result of that function along with the second item emitted by the source Observable into the same function, and so on until all items have been emitted by the source Observable, and emits the final result from the final call to your function as its sole item.
        \n\nreduce(R, Func2)
        \nReturns an Observable that applies a specified accumulator function to the first item emitted by a source Observable and a specified seed value, then feeds the result of that function along with the second item emitted by an Observable into the same function, and so on until all items have been emitted by the source Observable, emitting the final result from the final call to your function as its sole item.
        ]]>
    </string>

    <string name="str_mainlist_Observable_repeat_info">
        <![CDATA[
        repeat()
        \nReturns an Observable that repeats the sequence of items emitted by the source Observable indefinitely.
        \n\nrepeat(long count)
        \nReturns an Observable that repeats the sequence of items emitted by the source Observable at most count times.
        \n\nrepeat(long count, Scheduler scheduler)
        \nReturns an Observable that repeats the sequence of items emitted by the source Observable at most count times, on a particular Scheduler.
        \n\nrepeat(Scheduler scheduler)
        \nReturns an Observable that repeats the sequence of items emitted by the source Observable indefinitely, on a particular Scheduler.
        ]]>
    </string>

    <string name="str_mainlist_Observable_repeatWhen_info">
        <![CDATA[
        repeatWhen(Func1<? super Observable<? extends java.lang.Void>,? extends Observable<?>> notificationHandler)
        \nReturns an Observable that emits the same values as the source Observable with the exception of an onCompleted.
        \n\nrepeatWhen(Func1<? super Observable<? extends java.lang.Void>,? extends Observable<?>> notificationHandler, Scheduler scheduler)
        \nReturns an Observable that emits the same values as the source Observable with the exception of an onCompleted.
        ]]>
    </string>

    <string name="str_mainlist_Observable_replay_info">
        replay operator ensure that all observers see the same sequence of emitted items, even if they subscribe after the Observable has begun emitting items
    </string>

    <string name="str_mainlist_Observable_retry_info">
        <![CDATA[
        retry()
        \nReturns an Observable that mirrors the source Observable, resubscribing to it if it calls onError (infinite retry count).
        \n\nretry(Func2<java.lang.Integer,java.lang.Throwable,java.lang.Boolean> predicate)
        \nReturns an Observable that mirrors the source Observable, resubscribing to it if it calls onError and the predicate returns true for that specific exception and retry count.
        \n\nretry(long count)
        \nReturns an Observable that mirrors the source Observable, resubscribing to it if it calls onError up to a specified number of retries.
        ]]>
    </string>

    <string name="str_mainlist_Observable_retryWhen_info">
        Returns an Observable that emits the same values as the source observable with the exception of an onError.
    </string>

    <string name="str_mainlist_Observable_sample_info">
        <![CDATA[
        sample(long period, java.util.concurrent.TimeUnit unit)
        \nReturns an Observable that emits the most recently emitted item (if any) emitted by the source Observable within periodic time intervals.
        \n\nsample(long period, java.util.concurrent.TimeUnit unit, Scheduler scheduler)
        \nReturns an Observable that emits the most recently emitted item (if any) emitted by the source Observable within periodic time intervals, where the intervals are defined on a particular Scheduler.
        \n\nsample(Observable<U> sampler)
        \nReturns an Observable that, when the specified sampler Observable emits an item or completes, emits the most recently emitted item (if any) emitted by the source Observable since the previous emission from the sampler Observable.
        ]]>
    </string>

    <string name="str_mainlist_Observable_scan_info">
        <![CDATA[
        scan(Func2)
        \nReturns an Observable that applies a specified accumulator function to the first item emitted by a source Observable, then feeds the result of that function along with the second item emitted by the source Observable into the same function, and so on until all items have been emitted by the source Observable, emitting the result of each of these iterations.
        \n\nscan(R, Func2)
        \nReturns an Observable that applies a specified accumulator function to the first item emitted by a source Observable and a seed value, then feeds the result of that function along with the second item emitted by the source Observable into the same function, and so on until all items have been emitted by the source Observable, emitting the result of each of these iterations.
        ]]>
    </string>

    <string name="str_mainlist_Observable_sequenceEqual_info">
        <![CDATA[
        sequenceEqual(Observable, Observable)
        \nReturns an Observable that emits a Boolean value that indicates whether two Observable sequences are the same by comparing the items emitted by each Observable pairwise.
        \n\nsequenceEqual(Observable, Observable, Func2)
        \nReturns an Observable that emits a Boolean value that indicates whether two Observable sequences are the same by comparing the items emitted by each Observable pairwise based on the results of a specified equality function.
        ]]>
    </string>

    <string name="str_mainlist_Observable_serialize_info">
        Forces an Observable\'s emissions and notifications to be serialized and for it to obey the Observable contract in other ways.
    </string>

    <string name="str_mainlist_Observable_share_info">
        Returns a new Observable that multicasts (shares) the original Observable.
    </string>

    <string name="str_mainlist_Observable_single_info">
        <![CDATA[
        single()
        \nReturns an Observable that emits the single item emitted by the source Observable, if that Observable emits only a single item.
        \n\nsingle(Func1)
        \nReturns an Observable that emits the single item emitted by the source Observable that matches a specified predicate, if that Observable emits one such item.
        ]]>
    </string>

    <string name="str_mainlist_Observable_singleOrDefault_info">
        <![CDATA[
        singleOrDefault(T)
        \nReturns an Observable that emits the single item emitted by the source Observable, if that Observable emits only a single item, or a default item if the source Observable emits no items.
        \n\nsingleOrDefault(T, Func1)
        \nReturns an Observable that emits the single item emitted by the source Observable that matches a predicate, if that Observable emits only one such item, or a default item if the source Observable emits no such items.
        ]]>
    </string>

    <string name="str_mainlist_Observable_skip_info">
        <![CDATA[
        skip(int)
        \nReturns an Observable that skips the first count items emitted by the source Observable and emits the remainder.
        \n\nskip(long, TimeUnit)
        \nReturns an Observable that skips values emitted by the source Observable before a specified time window elapses.
        \n\nskip(long, TimeUnit, Scheduler)
        \nReturns an Observable that skips values emitted by the source Observable before a specified time window on a specified Scheduler elapses.
        ]]>
    </string>

    <string name="str_mainlist_Observable_skipLast_info">
        <![CDATA[
        skipLast(int)
        \nReturns an Observable that drops a specified number of items from the end of the sequence emitted by the source Observable.
        \n\nskipLast(long, TimeUnit)
        \nReturns an Observable that drops items emitted by the source Observable during a specified time window before the source completes.
        \n\nskipLast(long, TimeUnit, Scheduler)
        \nReturns an Observable that drops items emitted by the source Observable during a specified time window (defined on a specified scheduler) before the source completes.
        ]]>
    </string>

    <string name="str_mainlist_Observable_skipUntil_info">
        Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
    </string>

    <string name="str_mainlist_Observable_skipWhile_info">
        Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds true, but emits all further source items as soon as the condition becomes false.
    </string>

    <string name="str_mainlist_Observable_sorted_info">
        <![CDATA[
        \@Experimental
        \n\nsorted()
        \nReturns an Observable that emits the events emitted by source Observable, in a sorted order.
        \n\nsorted(Func2)
        \nReturns an Observable that emits the events emitted by source Observable, in a sorted order based on a specified comparison function.
        ]]>
    </string>

    <string name="str_mainlist_Observable_startWith_info">
        <![CDATA[
        startWith(Iterable)
        \nReturns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the source Observable.
        \n\nstartWith(Observable)
        \nReturns an Observable that emits the items in a specified Observable before it begins to emit items emitted by the source Observable.
        \n\nstartWith(T t1, T t2, â€¦, T t9)
        \nReturns an Observable that emits the specified items before it begins to emit items emitted by the source Observable.
        ]]>
    </string>

    <string name="str_mainlist_Observable_subscribe_info">
        <![CDATA[
        subscribe()
        \nSubscribes to an Observable and ignores onNext and onCompleted emissions.
        \n\nsubscribe(Action1)
        \nSubscribes to an Observable and provides a callback to handle the items it emits.
        \n\nsubscribe(Action1, Action1)
        \nSubscribes to an Observable and provides callbacks to handle the items it emits and any error notification it issues.
        \n\nsubscribe(Action1, Action1, Action0)
        \nSubscribes to an Observable and provides callbacks to handle the items it emits and any error or completion notification it issues.
        \n\nsubscribe(Observer)
        \nSubscribes to an Observable and provides an Observer that implements functions to handle the items the Observable emits and any error or completion notification it issues.
        \n\nsubscribe(Subscriber)
        \nSubscribes to an Observable and provides a Subscriber that implements functions to handle the items the Observable emits and any error or completion notification it issues.
        ]]>
    </string>

    <string name="str_mainlist_Observable_subscribeOn_info">
        Asynchronously subscribes Observers to this Observable on the specified Scheduler.
    </string>

    <string name="str_mainlist_Observable_switchIfEmpty_info">
        Returns an Observable that emits the items emitted by the source Observable or the items of an alternate Observable if the source Observable is empty.
    </string>

    <string name="str_mainlist_Observable_switchMap_info">
        Returns a new Observable by applying a function that you supply to each item emitted by the source Observable that returns an Observable, and then emitting the items emitted by the most recently emitted of these Observables.
    </string>

    <string name="str_mainlist_Observable_switchOnNext_info">
        Converts an Observable that emits Observables into an Observable that emits the items emitted by the most recently emitted of those Observables.
    </string>

    <string name="str_mainlist_Observable_take_info">
        <![CDATA[
        take(int)
        \nReturns an Observable that emits only the first count items emitted by the source Observable.
        \n\ntake(long, TimeUnit)
        \nReturns an Observable that emits those items emitted by source Observable before a specified time runs out.
        \n\ntake(long , TimeUnit, Scheduler)
        \nReturns an Observable that emits those items emitted by source Observable before a specified time (on a specified Scheduler) runs out.
        ]]>
    </string>

    <string name="str_mainlist_Observable_takeFirst_info">
        Returns an Observable that emits only the very first item emitted by the source Observable that satisfies a specified condition.
    </string>

    <string name="str_mainlist_Observable_takeLast_info">
        <![CDATA[
        takeLast(int)
        \nReturns an Observable that emits at most the last count items emitted by the source Observable.
        \n\ntakeLast(int, long, TimeUnit)
        \nReturns an Observable that emits at most a specified number of items from the source Observable that were emitted in a specified window of time before the Observable completed.
        \n\ntakeLast(int, long, TimeUnit, Scheduler)
        \nReturns an Observable that emits at most a specified number of items from the source Observable that were emitted in a specified window of time before the Observable completed, where the timing information is provided by a given Scheduler.
        \n\ntakeLast(long, TimeUnit)
        \nReturns an Observable that emits the items from the source Observable that were emitted in a specified window of time before the Observable completed.
        \n\ntakeLast(long, TimeUnit, Scheduler)
        \nReturns an Observable that emits the items from the source Observable that were emitted in a specified window of time before the Observable completed, where the timing information is provided by a specified Scheduler.
        ]]>
    </string>

    <string name="str_mainlist_Observable_takeLastBuffer_info">
        <![CDATA[
        takeLastBuffer(int)
        \nReturns an Observable that emits a single List containing at most the last count elements emitted by the source Observable.
        \n\ntakeLastBuffer(int, long, TimeUnit)
        \nReturns an Observable that emits a single List containing at most count items from the source Observable that were emitted during a specified window of time before the source Observable completed.
        \n\ntakeLastBuffer(int, long, TimeUnit, Scheduler)
        \nReturns an Observable that emits a single List containing at most count items from the source Observable that were emitted during a specified window of time (on a specified Scheduler) before the source Observable completed.
        \ntakeLastBuffer(long, TimeUnit)
        \nReturns an Observable that emits a single List containing those items from the source Observable that were emitted during a specified window of time before the source Observable completed.
        \n\ntakeLastBuffer(long, TimeUnit, Scheduler)
        \nReturns an Observable that emits a single List containing those items from the source Observable that were emitted during a specified window of time before the source Observable completed, where the timing information is provided by the given Scheduler.
        ]]>
    </string>

















</resources>